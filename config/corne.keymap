#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

/ {
    macros {
        flash_macro: flash_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mo3 {
            bindings = <&mo 3>;
            key-positions = <41 42>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <17 16>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <29 30>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <3 4>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <15 17>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <27 28>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <14 15>;
        };

        OslLayer {
            bindings = <&sl 4>;
            key-positions = <15 16>;
        };

        backtick {
            bindings = <&kp GRAVE>;
            key-positions = <28 29>;
        };
    };

    behaviors {
        tlt: tlt {
            compatible = "zmk,behavior-hold-tap";
            label = "TabPreferedLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <350>;
            quick-tap-ms = <160>;
        };

        hlt: hlt {
            compatible = "zmk,behavior-hold-tap";
            label = "HoldPreferedTap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E      &kp R         &kp T           &none  &kp Y      &kp U         &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D      &kp F         &kp G           &none  &kp H      &kp J         &kp K      &kp L    &kp SEMI  &mt LEFT_ALT SQT
&kp LSHFT   &kp Z  &kp X  &kp C      &kp V         &kp B           &none  &kp N      &kp M         &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                   &none  &kp LCTRL  &tlt 1 SPACE  &kp LEFT_GUI    &none  &kp ENTER  &tlt 2 SPACE  &none
                                                                   &none
            >;

            label = "Base";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        nav_and_func {
            bindings = <
&kp GRAVE  &kp F1  &kp F2   &kp F3   &kp F4   &kp F13                &trans  &kp C_VOLUME_UP    &kp HOME  &kp PG_UP  &kp INS    &kp PRINTSCREEN  &kp DELETE
&trans     &kp F5  &kp F6   &kp F7   &kp F8   &kp LC(PAUSE_BREAK)    &trans  &kp LEFT           &kp DOWN  &kp UP     &kp RIGHT  &trans           &trans
&trans     &kp F9  &kp F10  &kp F11  &kp F12  &kp C_AC_BACK          &trans  &kp C_VOLUME_DOWN  &kp END   &kp PG_DN  &kp DEL    &trans           &none
                   &trans   &trans   &trans   &trans                 &trans  &trans             &trans    &trans
                                                                     &trans
            >;

            label = "nav_and_func";
        };

        num_and_sym {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND       &kp DOLLAR    &kp LEFT_BRACE          &trans  &kp RIGHT_BRACE        &kp N7  &kp N8  &kp N9  &kp BACKSLASH  &trans
&trans     &kp PERCENT      &kp CARET    &kp AMPERSAND   &kp ASTERISK  &kp LBKT                &trans  &kp RIGHT_BRACKET      &kp N4  &kp N5  &kp N6  &kp PIPE       &trans
&trans     &kp PLUS         &kp EQUAL    &kp UNDERSCORE  &kp MINUS     &kp LEFT_PARENTHESIS    &trans  &kp RIGHT_PARENTHESIS  &kp N1  &kp N2  &kp N3  &trans         &trans
                            &trans       &trans          &trans        &trans                  &trans  &trans                 &trans  &kp N0
                                                                                               &trans
            >;

            label = "num_and_sym";
        };

        device_ctrl {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &trans           &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &trans           &trans  &trans  &trans
                          &trans        &trans        &trans        &trans          &trans  &trans           &trans           &trans
                                                                                    &trans
            >;

            label = "device_ctrl";
        };

        OSLMacros {
            bindings = <
&none  &none  &none      &none          &none            &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &kp LC(S)  &kp LC(LS(S))  &kp LC(LS(F))    &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none      &none          &kp LA(LC(F11))  &none    &none  &none  &none  &none  &none  &none  &none
              &none      &none          &none            &none    &none  &none  &none  &none
                                                                  &none
            >;

            label = "OSLMacros";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
