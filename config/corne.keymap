#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    macros {
        flash_macro: flash_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <21 22 23>;
            hold-trigger-on-release;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <17 16 15 14>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 8>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 22>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 30>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <34 35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 7>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC          &kp Q  &kp W  &kp E         &kp R        &kp T    &none  &kp Y      &kp U      &kp I           &kp O    &kp P     &kp BSPC
&mt LCTRL GRAVE  &kp A  &kp S  &kp D         &kp F        &kp G    &none  &kp H      &kp J      &kp K           &kp L    &kp SEMI  &kp SQT
&kp LSHFT        &kp Z  &kp X  &kp C         &kp V        &kp B    &none  &kp N      &kp M      &kp COMMA       &kp DOT  &kp FSLH  &kp RSHFT
                        &none  &kp LEFT_WIN  &lt 1 SPACE  &mo 2    &none  &kp ENTER  &kp SPACE  &kp LANGUAGE_1
                                                                   &none
            >;

            label = "Base";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        nav_and_func {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans                 &trans  &kp C_VOLUME_UP    &kp HOME  &kp PG_UP  &kp INS    &trans  &kp DELETE
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &kp LC(PAUSE_BREAK)    &trans  &kp LEFT           &kp DOWN  &kp UP     &kp RIGHT  &trans  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans                 &trans  &kp C_VOLUME_DOWN  &kp END   &kp PG_DN  &kp DEL    &trans  &trans
                &trans   &trans   &trans   &mo 3                  &trans  &trans             &trans    &trans
                                                                  &trans
            >;

            label = "nav_and_func";
        };

        num_and_sym {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND       &kp DOLLAR    &kp LEFT_BRACE          &trans  &kp RIGHT_BRACE        &kp N7  &kp N8  &kp N9  &kp BACKSLASH  &trans
&trans     &kp PERCENT      &kp CARET    &kp AMPERSAND   &kp ASTERISK  &kp LBKT                &trans  &kp RIGHT_BRACKET      &kp N4  &kp N5  &kp N6  &kp PIPE       &trans
&trans     &kp PLUS         &kp EQUAL    &kp UNDERSCORE  &kp MINUS     &kp LEFT_PARENTHESIS    &trans  &kp RIGHT_PARENTHESIS  &kp N1  &kp N2  &kp N3  &trans         &trans
                            &trans       &trans          &trans        &trans                  &trans  &trans                 &trans  &kp N0
                                                                                               &trans
            >;

            label = "num_and_sym";
        };

        device_ctrl {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
                          &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans
                                                                                    &trans
            >;

            label = "device_ctrl";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Flash {
            if-layers = <1 1>;
            then-layer = <1>;
        };
    };
};
